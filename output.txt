import
'../structure/tree_node.dart';
class
SolutionV1
{
bool
isSymmetric(TreeNode?
root)
{
bool
compare(TreeNode?
left,
TreeNode?
right)
{
if
(left
==
null
&&
right
==
null)
return
true;
if
(left?.val
!=
right?.val)
return
false;
return
compare(left?.left,
right?.right)
&&
compare(left?.right,
right?.left);
}
return
compare(root?.left,
root?.right);
}
}
class
SolutionV2
{
bool
isSymmetric(TreeNode?
root)
{
final
lefty
=
<TreeNode?>[root?.left],
righty
=
<TreeNode?>[root?.right];
TreeNode?
pop(List<TreeNode?>
list)
=>
list.isEmpty
?
null
:
list.removeLast();
while
(lefty.isNotEmpty
&&
righty.isNotEmpty)
{
final
l
=
pop(lefty),
r
=
pop(righty);
if
(l
==
null
&&
r
==
null)
continue;
if
(l?.val
!=
r?.val)
return
false;
lefty
..add(l?.left)
..add(l?.right);
righty
..add(r?.right)
..add(r?.left);
}
return
true;
}
}
